@using Chess
@model Chess.Data.Game
@{
    ViewBag.Title = "Network Chess";
}
<link href="~/Content/css/chessboard-0.3.0.css" rel="stylesheet" />
<script src="~/Scripts/jquery.signalR-2.1.2.js"></script>
<script src="~/signalr/hubs"></script>
<script src="~/Content/js/chess.js"></script>
<script src="~/Content/js/chessboard-0.3.0.js"></script>

<div id="board" style="width: 640px; display: block; margin-left: auto; margin-right: auto;"></div>
<div id="dashboard" style="width: 640px; display: block; margin-left: auto; margin-right: auto;">
    <div>
        <button id="startBtn">Start</button>
        <button id="clearBtn">Clear</button>
    </div>
    <div style="width: 640px; display: block; margin-left: auto; margin-right: auto;">
        <p>Status: <span id="status"></span></p>
        <p>FEN: <span id="fen"></span></p>
        <p>PGN: <span id="pgn"></span></p>
    </div>
</div>
<script>
    (function () {

        var board,
      game = new Chess(),
      statusEl = $('#status'),
      fenEl = $('#fen'),
      pgnEl = $('#pgn');

        // do not pick up pieces if the game is over
        // only pick up pieces for the side to move
        var onDragStart = function (source, piece, position, orientation) {
            if (game.game_over() === true ||
                (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
                (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
                return false;
            }
        };

        var onDrop = function (source, target) {
            // see if the move is legal
            var move = game.move({
                from: source,
                to: target,
                promotion: 'q' // NOTE: always promote to a queen for example simplicity
            });

            // illegal move
            if (move === null) return 'snapback';

            updateStatus();
        };

        // update the board position after the piece snap 
        // for castling, en passant, pawn promotion
        var onSnapEnd = function () {
            board.position(game.fen());
        };

        var updateStatus = function () {
            var status = '';

            var moveColor = 'White';
            if (game.turn() === 'b') {
                moveColor = 'Black';
            }

            // checkmate?
            if (game.in_checkmate() === true) {
                status = 'Game over, ' + moveColor + ' is in checkmate.';
            }

                // draw?
            else if (game.in_draw() === true) {
                status = 'Game over, drawn position';
            }

                // game still on
            else {
                status = moveColor + ' to move';

                // check?
                if (game.in_check() === true) {
                    status += ', ' + moveColor + ' is in check';
                }
            }

            statusEl.html(status);
            fenEl.html(game.fen());
            pgnEl.html(game.pgn());
        };

        var onChange = function (oldPos, newPos) {
            console.log("Position changed:");
            console.log("Old position: " + ChessBoard.objToFen(oldPos));
            console.log("New position: " + ChessBoard.objToFen(newPos));
            console.log("--------------------");

            onMove(ChessBoard.objToFen(oldPos), ChessBoard.objToFen(newPos));
        };

        var cfg = {
            orientation: '@Model.Orientation()',
            draggable: true,
            position: 'start',
            onDragStart: onDragStart,
            onDrop: onDrop,
            onSnapEnd: onSnapEnd,
            onChange: onChange
        };
        board = new ChessBoard('board', cfg);

        updateStatus();

        $('#startBtn').on('click', board.start);
        $('#clearBtn').on('click', board.clear);



        var gamesHub = $.connection.gamesHub;

        //on connected
        $.connection.hub.start().done(function () {
            console.log("Connection was established.");

            //register the player
            gamesHub.server.register(gameId());
        });

        gamesHub.client.showMessage = function (message) {
            alert(message);
        };

        gamesHub.client.setPosition = function(position) {
            board.position(position, true);
        }

        function onMove(oldPosition, newPosition) {
            gamesHub.server.onMove(gameId(), oldPosition, newPosition);
        }

        function gameId() {
            var url = window.location.toString();
            var id = url.substring(url.lastIndexOf('/') + 1);
            //console.log(id);
            return id;
        }
    })();
</script>
